# As an exercise, use incremental development to write a function called hypotenuse
# that returns the length of the hypotenuse of a right triangle given the lengths of
# the other two legs as arguments. Record each stage of the development
# process as you go. (Downey, 2015)

from math import sqrt


def hypotenuse(a, b):
    return sqrt(a**2 + b**2)


print(hypotenuse(3, 4))
# Two additional calls
print(hypotenuse(14, 48))
print(hypotenuse(8, 6))


# In the beginning I created a function with the name hypotenuse
# then I knew that this function will recieve two argument so I added the parameters
# a and b
# then I started writing the calculation
# for that I needed to calcluate the square root
# so I imported the sqrt function from math
# wrote the calculation and made the function return it
# In order to test it I wrote the print statement and called the function hypotenuse
# from the first attempt it ran correctly since it was an easy function to write


# Part 2

# Invent your own function that does some useful computation of your choosing.
# Do not copy the function from somewhere else. Use incremental development,
# and record each stage of the development process as you go. Finally,
# print output that demonstrates that the function works as you intended.

# Include all of the following in your Learning Journal:

#     An explanation of each stage of development, including code and any test input and output.
#     The output of three calls to your function with different arguments.
from random import uniform
from random import randint

def calculateMidRate(rates):
    sum = 0
    for rate in rates:
        sum += rate
    return round(sum / len(rates), 4)


def getFakeRates(length):
    rates = []
    for _ in range(length):
        rates.append(round(uniform(475, 480), 2))  # usually the dollar rate in my country is between 475 and 480
    return rates

for _ in range(3): # the for loop here is to call the function with different arguments :)
    days = randint(5, 10)
    myRates = getFakeRates(days)
    midRate = calculateMidRate(myRates)
    print(f'rates of last {days} day are: ', myRates)
    print('mid rate is: ', midRate)

# Steps I used
# First I decided to create a function that calculates the average of list of currency rates
# I wrote the function and it was easy
# when I wanted to call it, I realized I don't have any data to pass
# so I decided to create a function that gives me fake rates for n days
# before writing the getFakeRates function, I tests my function calculateMidRate
# by passing just an array with numbers in it, and it was working correctly
# I started writing getFakeRates function, it worked well, but I didn't like how numbers
# generated by `uniform` had long numbers after the decimal point, so I used round
# and decided to keep only two numbers after the deciaml point.
# all looked good, so I ued getFakeRates to get n days rates
# then passed it to calculateMidRate, and printed the results

# Output:
# rates of last 8 are:  [476.58, 476.07, 478.16, 479.4, 479.13, 477.19, 477.09, 477.24]
# mid rate is:  477.6075
# rates of last 10 are:  [479.26, 475.95, 475.2, 475.9, 475.9, 477.34, 475.12, 477.52, 478.54, 477.3]
# mid rate is:  476.803
# rates of last 5 are:  [476.88, 477.16, 476.39, 477.75, 475.41]
# mid rate is:  476.718

# Part 3

# Describe your experience so far with peer assessment of Discussion Assignments.

#     How do you feel about the feedback and ratings you have received from your peers?
#     How do you think your peers feel about the feedback you provided them? And the ratings you gave them?

# I always appriciate both positive and negative feedbacks, it is the way that I learn from my mistakes
# and also learn from others when assessing others' work.
# So far everything has been really well, and I am really enjoying having this course.

# References
# Downey, A. (2015). Think Python: How to think like a computer scientist. Needham, Massachusetts: Green Tree Press.â€¯
